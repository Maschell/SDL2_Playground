#-------------------------------------------------------------------------------
.SUFFIXES:
#-------------------------------------------------------------------------------
ifeq ($(strip $(MINGW64_PREFIX)),)
    $(error "Please set MINGW64_PREFIX in your environment. export MINGW64_PREFIX=<path to>/mingw64/bin/")
endif

CXX	:= $(MINGW64_PREFIX)g++
C	:= $(MINGW64_PREFIX)gcc
OBJCOPY	:= $(MINGW64_PREFIX)objcopy
LD	:= $(MINGW64_PREFIX)ld
PREFIX	:= $(MINGW64_PREFIX)

ifeq ($(strip $(CONFIG_PREFIX)),)
 PKG-CONFIG := $(PREFIX)pkg-config
else 
 PKG-CONFIG := $(CONFIG_PREFIX)pkg-config
endif

#-------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
#-------------------------------------------------------------------------------
TARGET		:=	SDL2_Playground
BUILD		:=	build-pc-win
SOURCES		:=	src \
				src/gui \
				src/fs \
				src/input \
				src/menu \
				src/resources \
				src/system \
				src/system/video \
				src/utils
DATA		:=	data \
				data/images \
				data/sounds \
				data/fonts
INCLUDES	:=	source


#-------------------------------------------------------------------------------
# options for code generation
#-------------------------------------------------------------------------------
CFLAGS :=  -g -Wall -O2 -ffunction-sections `$(PKG-CONFIG) --cflags SDL2_mixer SDL2_ttf SDL2_image` \
			$(MACHDEP)

CFLAGS	+=	$(INCLUDE)


ifeq ($(strip $(EXTRA_CFLAGS)),)
else 
 CFLAGS	+= $(EXTRA_CFLAGS)
endif

CXXFLAGS	:= $(CFLAGS) -std=c++17

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-g $(ARCH)

LIBS   :=   `$(PKG-CONFIG) --libs SDL2_mixer SDL2_ttf SDL2_image`

ifeq ($(strip $(EXTRA_LDFLAGS)),)
else 
    LDFLAGS	+= $(EXTRA_LDFLAGS)
endif

#-------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level
# containing include and lib
#-------------------------------------------------------------------------------
LIBDIRS	:= 

#-------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#-------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#-------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
			$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

FILELIST    :=    $(shell bash ./filelist.sh)
CFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES	:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES		:=	$(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
BINFILES	:=	$(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.*)))

#-------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#-------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#-------------------------------------------------------------------------------
	export LD	:=	$(CC)
#-------------------------------------------------------------------------------
else
#-------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#-------------------------------------------------------------------------------
endif
#-------------------------------------------------------------------------------

export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES_SRC	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

.PHONY: $(BUILD) clean all

#-------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD):
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.pc-win

#-------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).exe

#-------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#-------------------------------------------------------------------------------
# main targets
#-------------------------------------------------------------------------------

all	:	 $(OUTPUT).exe

$(OUTPUT).exe	: $(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

$(OUTPUT).exe:
	@echo linking ... $(notdir $@)
	@$(CXX) $(LDFLAGS) $(OFILES) $(LIBPATHS) $(LIBS) -o $@ $(ERROR_FILTER)

%.o: %.cpp
	@echo "$(notdir $<)"	
	@$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.d $(CXXFLAGS)  -c $< -o $@ $(ERROR_FILTER)

%.png.o %.png.h	:	%.png
	@echo $(notdir $<)
	@$(bin2o)
	
%.jpg.o %.jpg.h	:	%.jpg
	@echo $(notdir $<)
	@$(bin2o)
	
%.ogg.o %.ogg.h	:	%.ogg
	@echo $(notdir $<)
	@$(bin2o)
	
%.mp3.o %.mp3.h :	%.mp3
	@echo $(notdir $<)
	@$(bin2o)
    
%.ttf.o %.ttf.h	:	%.ttf
	@echo $(notdir $<)
	@$(bin2o)

define bin2o
	@$(LD) -r -b binary $< -o $(<F).o
	@$(OBJCOPY) $(<F).o --redefine-sym _binary_`(echo $< | tr . _| tr / _)`_start=`(echo $(<F) | tr . _)`
	@$(OBJCOPY) $(<F).o --redefine-sym _binary_`(echo $< | tr . _| tr / _)`_end=`(echo $(<F) | tr . _)`_end
	echo "#pragma once \n\
#include <stddef.h> \n\
#include <stdint.h> \n\
\n\
extern const uint8_t `(echo $(<F) | tr . _)`[]; \n\
extern const uint8_t `(echo $(<F) | tr . _)`_end[]; \n\
static const size_t `(echo $(<F) | tr . _)`_size=`(stat -c %s $<)`;"  > `(echo $(<F) | tr . _)`.h
endef

-include $(DEPENDS)

#-------------------------------------------------------------------------------
endif
#-------------------------------------------------------------------------------
